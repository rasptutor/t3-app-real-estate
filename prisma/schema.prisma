// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Property {
  id          String   @id @default(cuid())
  title       String
  description String
  location    String
  price       Float
  imageUrl    String
  owner       User     @relation(fields: [ownerId], references: [id])
  ownerId     String
  createdAt   DateTime @default(now())
  propertyType String
  bedrooms     Int
  bathrooms    Int
  availableFrom DateTime
  bookings      Booking[]
  reviews       Review[]
  images      PropertyImage[]
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  key        String
  property   Property @relation(fields: [propertyId], references: [id])
  propertyId String
}

model Booking {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  property    Property @relation(fields: [propertyId], references: [id])
  propertyId  String
  startDate   DateTime
  endDate     DateTime
  status      String   @default("CONFIRMED")
  createdAt   DateTime @default(now())
  review      Review?  @relation("BookingReview")
  reviewId    String?  @unique
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      
  comment   String
  createdAt DateTime @default(now())

  userId     String
  propertyId String

  user     User     @relation(fields: [userId], references: [id])
  property Property @relation(fields: [propertyId], references: [id])

  booking    Booking @relation("BookingReview", fields: [bookingId], references: [id])
  bookingId  String   @unique
}

enum Role {
  USER
  AGENT
  ADMIN
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime?
    image         String?
    role          Role     @default(USER)
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    properties    Property[]
    bookings      Booking[]
    reviews       Review[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
