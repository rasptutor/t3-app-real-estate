// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below    
  url      = env("DATABASE_URL")
}

model Post {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdBy   User   @relation(fields: [createdById], references: [id], onDelete: Cascade)
  createdById String

  @@index([name])
}

model Agency {
  id              String  @id @default(cuid())
  name            String
  description     String?
  specialization  String?
  rating          Float?
  reviewCount     Int?
  activeListings  Int?
  salesThisYear   Int?
  logoUrl         String?
  phone           String?
  email           String?
  address         String?
  website         String?

  agents     Agent[]
  properties Property[]

  @@map("agencies")
}

model Agent {
  id               String  @id @default(cuid())
  name             String
  email            String
  phone            String?
  photoUrl         String?
  specialization   String?
  yearsExperience  Int?
  agencyId         String?

  agency     Agency?     @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  properties Property[]
  bookings   Booking[]

  @@map("agents")
}

model Property {
  id            String   @id @default(cuid())
  title         String
  description   String
  location      String
  price         Float
  rentPrice     Float  @default(0)
  owner         User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId       String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())  @updatedAt
  propertyType  String
  listingType   String  @default("SALE")
  bedrooms      Int
  bathrooms     Int
  sqft          Int?
  parking       Int?
  features      String[]
  utilities     Json?
  availableFrom DateTime
  agencyId      String?
  agentId       String?
  bookings      Booking[]
  reviews       Review[]
  images        PropertyImage[]
  agency        Agency?   @relation(fields: [agencyId], references: [id], onDelete: SetNull)
  agent         Agent?    @relation(fields: [agentId], references: [id], onDelete: SetNull)

  @@index([location])
  @@index([price])
  @@index([propertyType])   
}

model PropertyImage {
  id         String   @id @default(cuid())
  url        String
  key        String
  property   Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId String
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

model Booking {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  propertyId  String
  agent       Agent?    @relation(fields: [agentId], references: [id], onDelete: SetNull)
  agentId     String?
  startDate   DateTime
  endDate     DateTime
  status      BookingStatus   @default(CONFIRMED)
  createdAt   DateTime @default(now())
  review      Review?  @relation("BookingReview")

  @@index([status])  
}

model Review {
  id        String   @id @default(cuid())
  rating    Int  @db.SmallInt     
  comment   String
  createdAt DateTime @default(now())

  userId     String
  propertyId String

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  booking    Booking @relation("BookingReview", fields: [bookingId], references: [id], onDelete: Cascade)
  bookingId  String   @unique
}

enum Role {
  USER
  AGENT
  ADMIN
}

// Necessary for Next auth
model Account {
  id                       String  @id @default(cuid())
  userId                   String
  type                     String
  provider                 String
  providerAccountId        String
  refresh_token            String? // @db.Text
  access_token             String? // @db.Text
  expires_at               Int?
  token_type               String?
  scope                    String?
  id_token                 String? // @db.Text
  session_state            String?
  user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  refresh_token_expires_in Int?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          Role     @default(USER)
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  properties    Property[]
  bookings      Booking[]
  reviews       Review[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
